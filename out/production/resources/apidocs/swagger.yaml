swagger: "2.0"
info:
  description: "User CRUD Service Document"
  version: "1.0.0"
  title: "User CRUD Service Swagger"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "bilalvdemir@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8093"
basePath: "/api/1.0"
tags:
  - name: "User"
    description: "Describe USER CRUD Service APIs usage"
parameters:
  Authorization:
    in: "header"
    name: Authorization
    description: "Example: 'Bearer 1sd23d12-aa112324-24sd354'"
    required: false
    type: "string"
    default: ""
  test:
    in: "query"
    name: test
    description: "Example: 123 test value that need to be considered for filter"
    required: false
    type: "number"
    minimum: 1
schemes:
  - "http"
  - "https"
paths:
  /user:
    get:
      tags:
        - "User"
      summary: "Get all user list"
      description: "Bütün kayıtlı kullanıcıların listesini döner."
      operationId: "getAllUserList"
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/userDTO"
        404:
          description: "Not Found"
          schema:
            type: string
            example: "User Not Found by Username: username."
      security:
        - Bearer: []
    post:
      tags:
        - "User"
      summary: "Create new user API"
      description: "Yeni kullanıcı kaydı oluşturan API'dir."
      operationId: "createNewUser"
      parameters:
        - in: body
          name: userBody
          description: userBodyResource
          required: true
          schema:
            $ref: '#/definitions/userDTO'
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/userDTO"
        404:
          description: "Not Found"
          schema:
            type: string
            example: "User Not Found by Username: username."
      security:
        - Bearer: []
  /user/{username}:
    get:
      tags:
        - "User"
      summary: "Get user by name"
      description: "Kayıtlı kullanıcıyı username bilgisine göre çeker."
      operationId: "getUser"
      parameters:
        - name: username
          in: path
          description: username
          required: true
          type: string
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/userDTO"
        404:
          description: "Not Found"
          schema:
            type: string
            example: "User Not Found by Username: username."
      security:
        - Bearer: []
    put:
      tags:
        - "User"
      summary: "Put registered user"
      description: "Kayıtlı bir kullanıcının bilgilerini güncelleyen API'dir."
      operationId: "putUser"
      parameters:
        - in: body
          name: userBody
          description: userBodyResource
          required: true
          schema:
            $ref: '#/definitions/userDTO'
        - in: path
          name: username
          description: username
          required: true
          type: string
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/userDTO"
        404:
          description: "Not Found"
          schema:
            type: string
            example: "User Not Found by Username: username."
      security:
        - Bearer: []
    delete:
      tags:
        - "User"
      summary: "Delete Saved User API"
      description: "Kayıtlı bir kullanıcıyı silen API'dir."
      operationId: "deleteUser"
      produces:
        - "application/json"
        - "text/plain"
      parameters:
        - $ref: '#/parameters/Authorization'
        - $ref: '#/parameters/test'
        - name: username
          in: path
          description: username
          required: true
          type: string
      responses:
        204:
          description: "successful operation"
        404:
          description: "Not Found"
          schema:
            type: string
            example: "User Not Found by Username: username."
      security:
        - Bearer: []
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  userDTO:
    type: "object"
    required:
      - "username"
      - "email"
      - "password"
      - "name"
      - "lastname"
    description: "Returns User model"
    properties:
      username:
        type: "string"
        description: "unique username"
        example: "username"
      email:
        type: "string"
        description: "email info"
        example: "email@mail.com"
      password:
        type: "string"
        description: "password info"
        example: "Password123."
      name:
        type: "string"
        description: "name info"
        example: "name"
      lastname:
        type: "string"
        description: "lastname info"
        example: "lastname"
    xml:
      name: "userDTO"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"